message=hello eureka server

#in standalone mode by setting registerWithEureka to false.
spring.application.name=eureka-service
#When the eureka server starts up it tries to fetch all the registry information from the peer eureka nodes. 
#This operation is retried 5 times for each peer 
eureka.server.numberRegistrySyncRetries=5
#If for some reason this operation fails, 
#the server does not allow clients to get the registry information for 5min
eureka.server.getWaitTimeInMsWhenSyncEmpty=5
#Eureka peer awareness brings in a whole new level of complication 
#by introducing a concept called “self-preservation”
# (can be turned off by setting eureka.server.enableSelfPreservation to false). 
eureka.server.enableSelfPreservation=false
#If there are two clients registered to a Eureka instance, each one sending a heartbeat every 30s, 
#the instance should receive 4 heartbeats in a minute. Spring adds a lower minimum of 1 to that 
eureka.instance.registry.expectedNumberOfRenewsPerMin=1
#so the instance expects to receive 5 heartbeats every minute. This is then multiplied by 0.85
#and rounded to the next integer, which brings us back to 5 again
eureka.server.renewalPercentThreshold=0.85
#If anytime there are less than 5 heartbeats received by Eureka in 15min
#it goes into self-preservation mode and stops expiring already registered instances.
eureka.server.renewalThresholdUpdateIntervalMs=15
#Eureka server makes an implicit assumption that the clients are sending their heartbeat at a fixed rate of 1 every 30s. 
#If two instances are registered, the server expects to receive (2 * 2 + 1 ) * 0.85 = 5 heartbeats every minute. 
#If the renewal rate drops below this value, the self-preservation mode is activated. Now, 
#if the clients are sending heartbeats much faster (say, every 10s), the server receives 12 heartbeats per minute 
#and keeps receiving 6/min even if one of the instances goes down. Thus, 
#the self protection mode is not activated even though it should be
#This is why it’s not advisable to change eureka.client.instanceInfoReplicationIntervalSeconds
#You can instead tinker with eureka.server.renewalPercentThreshold if you must.


registerWithEureka=false

eureka.server.eviction-interval-timer-in-ms= 1000
eureka.server.enableSelfPreservation=true
eureka.server.response-cache-update-interval-ms: 1